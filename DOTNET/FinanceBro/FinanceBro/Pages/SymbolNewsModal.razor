@using FinanceBro.Data
@inject ISymbolNewsListService service
@inject ISymbolFactsDataListService symbolservice
@inject IJSRuntime jsRuntime

<div class="modal fade show" tabindex="-1" role="dialog" id="taskModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">News Article</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@SymbolNews" OnValidSubmit="@HandleValidSubmit">
                    <div class="form-group">
                        <label for="headline">Symbol</label>
                        <InputSelect id="Summary" class="form-control"
                                     @bind-Value="@SymbolNews.symbol">
                            <option value="">Select</option>
                            @if (symbolFactsDataList == null)
                            {
                                @foreach (var sym in InitialisingList)
                                {
                                    <option value="@sym">
                                        @sym
                                    </option>
                                }
                            }
                            else
                            {
                                @foreach (var sym in symbolFactsDataList)
                                {
                                    <option value="@sym.Symbol">
                                        @sym.CompanyName
                                    </option>
                                }
                            }
                        </InputSelect>
                    </div>
                    <div class="form-group">
                        <label for="articledatetime">Publication Date</label>
                        <input type="date" id="addition" name="math" @bind-value="@SymbolNews.articledatetime" />
                    </div>
                    <div class="form-group">
                        <label for="symbol">Headline</label>
                        <input type="hidden" @bind-value="@SymbolNews.headline" />
                        <InputText id="name" class="form-control" @bind-Value="@SymbolNews.headline" />
                    </div>
                    <div class="form-group">
                        <label for="symbol">Summary</label>
                        <input type="hidden" @bind-value="@SymbolNews.summary" />
                        <InputText id="name" class="form-control" @bind-Value="@SymbolNews.summary" />
                    </div>
                    <div class="form-group">
                        <label for="symbol">Source</label>
                        <input type="hidden" @bind-value="@SymbolNews.url" />
                        <InputText id="name" class="form-control" @bind-Value="@SymbolNews.url" />
                    </div>
                    <div class="form-group">
                        <label for="headline">Rating</label>
                        <InputSelect id="Summary" class="form-control"
                                     @bind-Value="SymbolNews.comment">
                            <option value="">Select</option>
                            @foreach (var rating in SymbolComment)
                            {
                                <option value="@rating">
                                    @rating
                                </option>
                            }
                        </InputSelect>
                    </div>
                    <button type="submit" class="btn btn-primary">Submit</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>


@code {

    [Parameter]
    public SymbolNews SymbolNews { get; set; }

    [Parameter]
    public Action DataChanged { get; set; }

    private async Task CloseTaskModal()
    {
        await jsRuntime.InvokeAsync<object>("CloseModal", "taskModal");
    }

    private async void HandleValidSubmit()
    {
        await service.Add(SymbolNews);
        await CloseTaskModal();
        DataChanged?.Invoke();
    }










    public SymbolFacts symbolObj;

    public List<SymbolFacts> symbolFactsDataList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        symbolFactsDataList = await symbolservice.Get();
    }

    List<string> SymbolComment = new List<string>() { "Positive", "Negative", "Neutral" };

    List<string> InitialisingList = new List<string>() { "Initialising" };



}

